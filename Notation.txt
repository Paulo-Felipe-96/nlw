## FRONT-END

Para o CSS, os elementos HTML são separados em caixas, ou box models.

As formas de exibição podem ser block (linha inteira) e inline (do tamanho dela).

Semântico: ter sentido/significado.

@media, conjunto de regras, necessita do <meta ...>, e nesse local podemos configurar a responsividade da(s) página(s).

Refatorar: modificar algumas coisas. O que significa também fazer ajustes para facilitar manutenções futuras.

Promise: a função fetch é uma promise, que "promete ir até determinado lugar", mas pode ou não trazer consigo dados.

## create-point.js(

    Para fazer a população de:

    documento
        seleciona o nome do campo estado
        ouvidor de eventos (evento, funcao por referencia)

    CIDADES
    a funcao com o evento
        seleciona o nome do campo cidade
        valor dos estados trazido no evento com target (o responsavel pela disparada)
        url da api

        promessa
            retorno do objeto json
            pega novamente e da outro nome
                estrutura of
                    selecao do campo cidade recebe option com id e nome

                    ativa o campo de selecao setando para falso o valor disabled

)

Toda tecnologia/stack tem suas vantagens e desvantagens
    . oportunidades de mercado
    . momento da carreira
    . contexto onde é usada
    . não há como fugir do JS


## BACK-END

Responsabilidades
    . Receber requisições do cliente
    . Preparar as requisições (regras de negócio)
    . Enviar resposta
    . Dados (tratamento dos dados)

Tecnologias
    . Javascript
    . Node.js
    . Banco de dados SQL
    . SQLite

Estrutura do projeto:
    src > recursos a serem servidos para o front-end
    
Criação do servidor:
    Inicializar o projeto na raiz
        $ npm init -y
    módulos extras
        Express
